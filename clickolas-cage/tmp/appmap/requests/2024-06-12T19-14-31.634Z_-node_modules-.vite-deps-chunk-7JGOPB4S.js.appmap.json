{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-7JGOPB4S.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:5173",
          "Connection": "keep-alive",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
          "Accept": "*/*",
          "Sec-Fetch-Site": "none",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "empty",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "appland_session=bFU5p0cvqrcXlz2oQfgEZG3%2BQjfds2AwmlOA%2Fx5fhQLjPvVHIKrHyvnbeq5nw8c5sME56znPsnpSSzB3nr%2BHfdk9sEC9MgOgNKjgjD8qlzGqDVuwRPr30ch96LWGIDwuITrAUwQGqlUw7%2Fdsq0tjrfHFPTlemq71kQtCAIi9JTRWo5tLPJlG%2F9JtfTuiWIfWg8X67ZkAOuaapIHdaA5w5QtwMr7h34LfseImCERQpzoz9xTqJYqSi2SJ9RE1eVw2jyYFG9IGPA4d1USUIXvAmeaMOQ9Z%2BDmKhiIRXve6%2BzO47%2F2RW1kaH2PND2r0EKz%2BaWMbrXswEaj2kjwx09pTJANR5arO0I9c2RelyrURJyvI%2FZ8OwnG99VyxbE2scovqFvxwhmhXr1KDOxpRle3VOJSpxXtFaDjv2TSSbtqGkIj4T51u58xasM4KbZUpapu5OQ5ENf%2FSMADW4DHmCrSQJ14SgVbNtrazlgwdph5p0AKax1l0Bw7j0jz2SGT9C5HMnzVyZdV59G6paFrgLqvtGuXdWr4VeJt2tPVftjki2S0LpmpTAacYMTeiz0JRvAUI2MTy5coFmozGwP2tYolztMsGb%2Bss8Pp0ZRYy8EsEs78L1J1nDMR5VCJ5yVhSq8JXZA7Misee05vblyt4OMHf9CA4AMzWpe2NbExRxiHuW%2Bkx%2F83vj%2Btrqn1QRG33cQUOn3jl8nfSuSLj5p0K5PYVYnXJu8E7RhAyqpC6J23a%2F8B4qsDAOrIrUYPQAWaYOsjd0i3Q5y49d77RlVc7zyyLJxFNVWLlYCD5BrfOMpyF2f9InowPEQei23xjT4UE0W3dXZP1xhk5wDvQ--zbb2b%2Flld908TQxF--8LcY2kn8%2BBw8bSaDiyP6LQ%3D%3D"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'85b4035a'",
          "class": "String"
        },
        {
          "name": "t",
          "value": "'1718219671620'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "application/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"12fdf-tX3kb9jgofRpq6p7vX+opTx95T4\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-6TJCVOLN.js?v=85b4035a\";\n\n// node_modules/react/cjs/react.development.js\nvar require_react_development = __commonJS({\n  \"node_modules/react/cjs/react.development.js\"(exports, module) {\n    \"use strict\";\n    if (true) {\n      (function() {\n        \"use strict\";\n        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var ReactVersion = \"18.2.0\";\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n          if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n            return null;\n          }\n          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n          if (typeof maybeIterator === \"function\") {\n            return maybeIterator;\n          }\n          return null;\n        }\n        var ReactCurrentDispatcher = {\n          /**\n           * @internal\n           * @type {ReactComponent}\n           */\n          current: null\n        };\n        var ReactCurrentBatchConfig = {\n          transition: null\n        };\n        var ReactCurrentActQueue = {\n          current: null,\n          // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n          isBatchingLegacy: false,\n          didScheduleLegacyUpdate: false\n        };\n        var ReactCurrentOwner = {\n          /**\n           * @internal\n           * @type {ReactComponent}\n           */\n          current: null\n        };\n        var ReactDebugCurrentFrame = {};\n        var currentExtraStackFrame = null;\n        function setExtraStackFrame(stack) {\n          {\n            currentExtraStackFrame = stack;\n          }\n        }\n        {\n          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {\n            {\n              currentExtraStackFrame = stack;\n            }\n          };\n          ReactDebugCurrentFrame.getCurrentStack = null;\n          ReactDebugCurrentFrame.getStackAddendum = function() {\n            var stack = \"\";\n            if (currentExtraStackFrame) {\n              stack += currentExtraStackFrame;\n            }\n            var impl = ReactDebugCurrentFrame.getCurrentStack;\n            if (impl) {\n              stack += impl() || \"\";\n            }\n            return stack;\n          };\n        }\n        var enableScopeAPI = false;\n        var enableCacheElement = false;\n        var enableTransitionTracing = false;\n        var enableLegacyHidden = false;\n        var enableDebugTracing = false;\n        var ReactSharedInternals = {\n          ReactCurrentDispatcher,\n          ReactCurrentBatchConfig,\n          ReactCurrentOwner\n        };\n        {\n          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n        }\n        function warn(format) {\n          {\n            {\n              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n              }\n              printWarning(\"warn\", format, args);\n            }\n          }\n        }\n        function error(format) {\n          {\n            {\n              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n              }\n              printWarning(\"error\", format, args);\n            }\n          }\n        }\n        function printWarning(level, format, args) {\n          {\n            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;\n            var stack = ReactDebugCurrentFrame2.getStackAddendum();\n            if (stack !== \"\") {\n              format += \"%s\";\n              args = args.concat([stack]);\n            }\n            var argsWithFormat = args.map(function(item) {\n              return String(item);\n            });\n            argsWithFormat.unshift(\"Warning: \" + format);\n            Function.prototype.apply.call(console[level], console, argsWithFormat);\n          }\n        }\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n          {\n            var _constructor = publicInstance.constructor;\n            var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n            var warningKey = componentName + \".\" + callerName;\n            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n              return;\n            }\n            error(\"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.\", callerName, componentName);\n            didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n          }\n        }\n        var ReactNoopUpdateQueue = {\n          /**\n           * Checks whether or not this composite component is mounted.\n           * @param {ReactClass} publicInstance The instance we want to test.\n           * @return {boolean} True if mounted, false otherwise.\n           * @protected\n           * @final\n           */\n          isMounted: function(publicInstance) {\n            return false;\n          },\n          /**\n           * Forces an update. This should only be invoked when it is known with\n           * certainty that we are **not** in a DOM transaction.\n           *\n           * You may want to call this when you know that some deeper aspect of the\n           * component's state has changed but `setState` was not called.\n           *\n           * This will not invoke `shouldComponentUpdate`, but it will invoke\n           * `componentWillUpdate` and `componentDidUpdate`.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} callerName name of the calling function in the public API.\n           * @internal\n           */\n          enqueueForceUpdate: function(publicInstance, callback, callerName) {\n            warnNoop(publicInstance, \"forceUpdate\");\n          },\n          /**\n           * Replaces all of the state. Always use this or `setState` to mutate state.\n           * You should treat `this.state` as immutable.\n           *\n           * There is no guarantee that `this.state` will be immediately updated, so\n           * accessing `this.state` after calling this method may return the old value.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {object} completeState Next state.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} callerName name of the calling function in the public API.\n           * @internal\n           */\n          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n            warnNoop(publicInstance, \"replaceState\");\n          },\n          /**\n           * Sets a subset of the state. This only exists because _pendingState is\n           * internal. This provides a merging strategy that is not available to deep\n           * properties which is confusing. TODO: Expose pendingState or don't use it\n           * during the merge.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {object} partialState Next partial state to be merged with state.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} Name of the calling function in the public API.\n           * @internal\n           */\n          enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n            warnNoop(publicInstance, \"setState\");\n          }\n        };\n        var assign = Object.assign;\n        var emptyObject = {};\n        {\n          Object.freeze(emptyObject);\n        }\n        function Component(props, context, updater) {\n          this.props = props;\n          this.context = context;\n          this.refs = emptyObject;\n          this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        Component.prototype.setState = function(partialState, callback) {\n          if (typeof partialState !== \"object\" && typeof partialState !== \"function\" && partialState != null) {\n            throw new Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n          }\n          this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n        };\n        Component.prototype.forceUpdate = function(callback... (67791 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0015623910003341734
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.0",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v18.19.0"
    },
    "app": "clickolas-cage",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-7JGOPB4S.js (200) — 2024-06-12T19:14:31.634Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-7JGOPB4S.js"
        }
      ]
    }
  ]
}